<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hys.trazar.mapper.DesignBoardMapper">
	
	<!-- list query -->
	<select id="selectDesignBoardAll" resultType="com.hys.trazar.domain.DesignBoardDto">
		SELECT d.id, 
			   d.title, 
			   d.body, 
			   d.price, 
			   d.inserted,
			   d.category,
			   m.id memberId,
			   m.nickName writerNickName
		FROM DesignBoard d LEFT JOIN Review r ON d.id = r.memberId
								JOIN Member m ON d.memberId = m.id
		<if test="keyword != '%%'">
			<choose>
				<when test="type == 'bodyTitle'">
					WHERE d.title LIKE #{keyword } OR
					      d.body LIKE #{keyword }
				</when>
				<when test="type == 'title'">
					WHERE d.title LIKE #{keyword }
				</when>
				<when test="type == 'body'">
					WHERE  d.body LIKE #{keyword }
				</when>
				<when test="type == 'writerNickName'">
					WHERE   m.nickName LIKE #{keyword }
				</when>
			</choose>
		</if>
		GROUP BY d.id
		ORDER BY d.id DESC
	</select>
	
	<insert id="insertDesignBoard" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
		INSERT INTO DesignBoard (title, body, price, memberId, categoryName)
		VALUES (#{title}, #{body}, #{price}, #{memberId}, #{categoryName})
	</insert>
	
	<!-- get -->
	<select id="selectDesignBoardById" resultType="com.hys.trazar.domain.DesignBoardDto">
		SELECT d.id, 
			   d.title, 
			   d.body, 
			   d.price, 
			   d.inserted,
			   d.category,
			   m.id memberId,
			   d.clicked,
			   (SELECT COUNT(likeCheck) 
				FROM Likes
				WHERE designBoardId = #{designBoardId} and likeCheck = 1)
				AS likeCount

		FROM DesignBoard d JOIN Member m ON d.memberId = m.id
		WHERE d.id = #{id}
	</select>

	<update id="updateDesignBoard">
		UPDATE DesignBoard
		SET title = #{title},
			body = #{body},
			price = #{price}			
		WHERE 
			id = #{id}
	</update>
	
	<update id="increamentClicked">
		UPDATE DesignBoard
		SET clicked = clicked + 1
		WHERE id = #{id}
	</update>
	
	<delete id="deleteDesignBoard">
		DELETE FROM DesignBoard
		WHERE id = #{id }
	</delete>
	
	<delete id="deleteByMemberId">
		DELETE FROM DesignBoard
		WHERE memberId = #{memberId}
	</delete>
	
	<select id="listByMemberId" resultType="com.hys.trazar.domain.DesignBoardDto">
		SELECT id
		FROM DesignBoard
		WHERE memberId = #{memberId}
	</select>
	
	<!-- category query -->
	<select id="selectDesignBoardCategory" resultType="com.hys.trazar.domain.DesignBoardDto">
		SELECT d.id, 
			   d.title, 
			   d.body, 
			   d.price, 
			   d.inserted,
			   m.id memberId,
			   m.nickName writerNickName
		FROM DesignBoard d LEFT JOIN Review r ON d.id = r.memberId
								JOIN Member m ON d.memberId = m.id
		WHERE categoryName = #{categoryName} 
		GROUP BY d.id
		ORDER BY d.id DESC
	</select>
	
	<!-- hotList query -->
	<select id="hotList" resultType="com.hys.trazar.domain.DesignBoardDto">
		SELECT d.id, 
			   d.title, 
			   d.body, 
			   d.price, 
			   d.inserted,
			   m.id memberId,
			   m.nickName writerNickName
		FROM DesignBoard d LEFT JOIN Review r ON d.id = r.memberId
								JOIN Member m ON d.memberId = m.id
		GROUP BY d.id
		ORDER BY d.clicked DESC
		LIMIT 4
	</select>
	
	
	<!-- 카운트로 유저의 좋아요에 대한 정보를 얻음 -->
	<select id="likeSelectById" resultType="Integer" parameterType="com.hys.trazar.domain.LikeDto">
		SELECT count(likeCheck) 
		FROM Likes 
		WHERE designBoardId = #{designBoardId} AND memberId = #{memberId}   
	</select>
	
	
	<!-- 테이블값(멤버/디자인보드 아이디) 넣는 쿼리 -->
	<insert id="likeInsert" parameterType="com.hys.trazar.domain.LikeDto">		
		INSERT INTO Likes (memberId, designBoardId)
		VALUES (#{memberId}, #{designBoardId})
	</insert>
	
	
	<!-- 좋아요가 없는 경우 카운트를 다시 확인 -->
	<select id="likeGetInfo" resultType="Integer" parameterType="com.hys.trazar.domain.LikeDto">
		SELECT likeCheck 
		FROM Likes 
		WHERE designBoardId = #{designBoardId} AND memberId = #{memberId} 
	</select>
	
	
	<!-- 1일때 빈하트로 업뎃 0일때 하트로 업뎃 -->
	<update id="likeUpdate" parameterType="com.hys.trazar.domain.LikeDto">
		UPDATE Likes
		SET <include refid="cal"></include>
		WHERE designBoardId = #{designBoardId} AND memberId = #{memberId}
		
		<selectKey keyProperty="id" order="AFTER" resultType="Integer">
			select count(likeCheck) from Likes where designBoardId =#{designBoardId} and likeCheck = 1
		</selectKey>
	</update>
	
	<sql id="cal">
		<if test="count == 1">
			likeCheck = 0
		</if>
		
		<if test="count == 0">
			likeCheck = likeCheck + 1
		</if>
	</sql>
	
	<delete id="deleteByDesignBoardId">
	DELETE FROM Likes
	WHERE designBoardId = #{designBoardId}
	</delete>
	
	<delete id="deleteListByMemberId">
	DELETE FROM Likes
	WHERE memberId = #{memberId}
	</delete>
</mapper>